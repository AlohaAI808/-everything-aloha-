---
import { locations } from '../utils/weather';
---

<div class="bg-white rounded-xl shadow-lg p-6 mb-8">
  <h3 class="text-xl font-semibold mb-4 flex items-center">
    <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 15a4 4 0 004 4h9a5 5 0 10-.1-9.999 5.002 5.002 0 10-9.78 2.096A4.001 4.001 0 003 15z" />
    </svg>
    Current Weather
  </h3>
  <div class="text-sm text-gray-500 mb-4">Last updated: <span id="weather-update-time">Updating...</span></div>
  <div id="weather-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
    {Object.keys(locations).map(location => (
      <div class="weather-card group" data-location={location}>
        <div class="flex items-center justify-between mb-2">
          <h4 class="font-medium text-lg capitalize">{location}</h4>
          <button 
            class="refresh-weather opacity-0 group-hover:opacity-100 transition-opacity p-1 hover:bg-blue-50 rounded-full"
            data-location={location}
            title="Refresh weather"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
            </svg>
          </button>
        </div>
        <div class="weather-data animate-pulse">
          <div class="flex items-center justify-center h-24">
            <svg class="animate-spin h-6 w-6 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </div>
        </div>
      </div>
    ))}
  </div>
</div>

<script>
import { locations, fetchWeatherData, updateWeatherUI, showWeatherError } from '../utils/weather';

let lastUpdate = new Date();
const updateTimeElement = document.getElementById('weather-update-time');

function updateLastUpdateTime() {
  if (updateTimeElement) {
    const timeString = lastUpdate.toLocaleTimeString('en-US', { 
      hour: 'numeric', 
      minute: '2-digit',
      hour12: true 
    });
    updateTimeElement.textContent = timeString;
  }
}

async function initWeather(location: string, coords: { lat: number; lon: number }) {
  try {
    const data = await fetchWeatherData(location, coords);
    updateWeatherUI(location, data);
    lastUpdate = new Date();
    updateLastUpdateTime();
  } catch (error) {
    console.error('Error fetching weather:', error);
    showWeatherError(location);
  }
}

// Initialize weather for all locations
Object.entries(locations).forEach(([location, coords]) => {
  initWeather(location, coords);
});

// Handle refresh button clicks
document.querySelectorAll('.refresh-weather').forEach(button => {
  button.addEventListener('click', (e) => {
    e.preventDefault();
    const location = button.getAttribute('data-location');
    if (location && locations[location]) {
      const weatherData = document.querySelector(`[data-location="${location}"] .weather-data`);
      if (weatherData) {
        weatherData.classList.add('animate-pulse');
        weatherData.innerHTML = `
          <div class="flex items-center justify-center h-24">
            <svg class="animate-spin h-6 w-6 text-blue-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
              <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
          </div>
        `;
      }
      initWeather(location, locations[location]);
    }
  });
});

// Handle retry events
window.addEventListener('retryWeather', (event: CustomEvent) => {
  const location = event.detail;
  if (location && locations[location]) {
    initWeather(location, locations[location]);
  }
});

// Update time every minute
setInterval(updateLastUpdateTime, 60000);
</script>

<style>
.weather-card {
  @apply bg-gray-50 rounded-lg p-4 transition-all duration-300 hover:shadow-md relative;
}

.refresh-weather {
  @apply transition-transform duration-300;
}

.refresh-weather:hover {
  @apply transform rotate-180;
}
</style>