---
interface Props {
  threshold?: number;
  rootMargin?: string;
  className?: string;
}

const {
  threshold = 0.1,
  rootMargin = '50px',
  className = ''
} = Astro.props;
---

<div 
  class={`lazy-load opacity-0 transition-opacity duration-500 ${className}`}
  data-threshold={threshold}
  data-root-margin={rootMargin}
>
  <slot />
</div>

<script>
  class LazyLoader {
    private observer: IntersectionObserver;
    private elements: Set<Element> = new Set();

    constructor() {
      this.observer = new IntersectionObserver(
        this.handleIntersection.bind(this),
        {
          threshold: 0.1,
          rootMargin: '50px'
        }
      );

      this.init();
    }

    private init() {
      document.querySelectorAll('.lazy-load').forEach(element => {
        this.elements.add(element);
        this.observer.observe(element);
      });
    }

    private handleIntersection(entries: IntersectionObserverEntry[]) {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          const element = entry.target;
          element.classList.remove('opacity-0');
          this.observer.unobserve(element);
          this.elements.delete(element);
        }
      });
    }

    public disconnect() {
      this.observer.disconnect();
      this.elements.clear();
    }
  }

  // Initialize lazy loading
  const lazyLoader = new LazyLoader();

  // Cleanup on page navigation
  document.addEventListener('astro:before-swap', () => {
    lazyLoader.disconnect();
  });
</script>